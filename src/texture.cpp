#include "texture.h"


const texture textureTable[] = {
    {{15430, 17543, 13221, 17511, 13253, 15398, 21801, 15334, 17511, 15366, 19624}, {0, 18, 19, 69, 101, 87, 112, 55, 8, 73, 162, 24, 112, 112, 113, 89, 115, 144, 164, 5, 84, 115, 160, 116, 67, 84, 112, 145, 84, 80, 163, 71},0.9},
{{27173, 33511, 41897, 29614, 18820, 19623, 17511, 15398, 13286, 13253, 15366, 15366}, {0, 17, 34, 0, 16, 3, 0, 18, 66, 16, 17, 32, 0, 16, 33, 1, 32, 36, 0, 48, 68, 69, 68, 4, 70, 87, 120, 73, 122, 107, 121, 88},1},
{{23013, 29550, 31399, 35921, 39785, 48172}, {82, 69, 37, 68, 36, 2, 36, 48, 82, 32, 82, 34, 33, 82, 64, 37, 66, 69, 4, 36, 32, 68, 36, 0, 82, 34, 50, 37, 34, 85, 68, 34},0.9},
{{27469, 29614, 33808, 38034}, {51, 35, 33, 18, 34, 18, 18, 34, 33, 0, 17, 16, 34, 51, 35, 34, 18, 33, 17, 33, 35, 34, 34, 34, 18, 35, 51, 19, 16, 1, 16, 17},0.9},
{{20965, 25157, 29383, 33543, 39848, 42026, 44106, 46219, 48300}, {16, 18, 16, 17, 7, 135, 120, 112, 23, 84, 52, 129, 22, 71, 133, 113, 24, 56, 117, 96, 7, 69, 68, 113, 23, 135, 118, 113, 16, 17, 2, 17},1},
{{14691, 20965, 25157, 29383, 37768, 39881}, {51, 19, 51, 3, 49, 34, 48, 82, 48, 34, 48, 82, 64, 50, 49, 50, 65, 50, 48, 50, 67, 19, 65, 50, 35, 19, 66, 19, 35, 3, 67, 20},0.85},
{{54737, 56883, 56980, 59126, 61239, 63353}, {66, 35, 33, 50, 18, 33, 33, 19, 50, 1, 20, 34, 35, 49, 33, 49, 18, 82, 19, 35, 33, 34, 51, 50, 20, 33, 21, 18, 33, 34, 18, 33},1},
{{25323, 29549, 33808, 35856, 40082, 40147, 46486, 46356}, {3, 65, 21, 37, 82, 33, 34, 49, 34, 16, 49, 51, 34, 50, 50, 21, 19, 39, 65, 18, 2, 20, 1, 51, 49, 4, 34, 101, 85, 50, 83, 82},1},
{{33808, 44699, 55133, 65535, 36377, 44699, 55133}, {102, 102, 102, 101, 96, 0, 0, 5, 96, 6, 48, 4, 96, 83, 32, 4, 96, 49, 34, 4, 96, 17, 38, 36, 81, 0, 2, 37, 84, 68, 68, 85}, 1, {0, 255},{85, 85, 64, 1, 65, 1, 68, 1, 64, 1, 64, 17, 64, 1, 85, 85}},
{{2786, 2689, 5058, 5283, 0}, {0, 18, 0, 48, 66, 2, 66, 3, 48, 36, 3, 32, 49, 4, 4, 52, 66, 65, 34, 4, 17, 0, 16, 32, 64, 36, 34, 3, 33, 2, 67, 2}, 0.7, {255, 0},{0, 0, 64, 64, 1, 0, 1, 17, 68, 1, 0, 0, 65, 0, 0, 64}},
{{2112, 6305, 6305, 16641, 18755, 20932, 29124, 39622, 43847, 48332}, {16, 54, 99, 1, 9, 136, 120, 144, 56, 69, 68, 131, 104, 72, 84, 134, 104, 84, 117, 134, 55, 85, 68, 115, 9, 119, 136, 144, 32, 54, 99, 1}, 1},
{{6305, 6305, 10465, 14594, 16641, 18755, 25221, 29124, 31494, 37800, 39977, 44138, 46518, 48299}, {11, 55, 83, 208, 9, 131, 56, 96, 4, 67, 61, 208, 2, 128, 8, 144, 12, 197, 90, 160, 9, 131, 57, 128, 13, 163, 59, 176, 9, 128, 8, 145}, 1},
{{6305, 6305, 10465, 14594, 16641, 18755, 25221, 29124, 31494, 37800, 39977, 44138, 46518, 48299, 57051, 65535}, {11, 55, 83, 208, 9, 131, 56, 144, 4, 179, 52, 64, 2, 128, 12, 192, 2, 213, 95, 224, 14, 243, 56, 240, 13, 163, 59, 176, 6, 128, 8, 97}, 1},
{{25221, 31494, 37800, 39977, 44138, 48299, 50412}, {84, 83, 102, 102, 85, 66, 67, 69, 69, 82, 69, 67, 33, 16, 33, 0, 86, 54, 102, 99, 69, 84, 52, 50, 51, 69, 68, 66, 0, 17, 33, 0}, 1},
{{39302, 39302, 39302}, {17, 17, 17, 17, 16, 0, 0, 1, 16, 2, 0, 1, 16, 32, 0, 1, 16, 0, 0, 1, 16, 0, 2, 1, 16, 0, 0, 1, 17, 17, 17, 17}, 1,{90, 163, 172},{85, 85, 64, 1, 66, 1, 72, 1, 64, 1, 64, 33, 64, 1, 85, 85}},
{{10863, 12944, 12977, 15090, 15123, 15123, 15124, 15156, 19384, 19416}, {1, 113, 16, 0, 16, 0, 1, 19, 0, 17, 0, 0, 16, 17, 16, 19, 16, 0, 1, 54, 0, 0, 16, 0, 16, 1, 17, 17, 17, 19, 71, 49}, 1,{105},{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
{{10863, 12944, 12977, 15090, 15123, 15123, 15124, 15156, 19384, 19416}, {16, 48, 0, 0, 0, 17, 19, 17, 0, 17, 17, 0, 145, 17, 16, 19, 0, 0, 17, 17, 0, 0, 0, 0, 0, 1, 19, 17, 17, 99, 49, 17}, 1,{105},{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
{{10863, 12944, 12977, 15090, 15123, 15123, 15124, 15156, 19384, 19416}, {19, 49, 0, 0, 48, 0, 1, 51, 0, 17, 0, 0, 16, 17, 16, 19, 48, 0, 1, 23, 0, 0, 16, 0, 0, 1, 17, 17, 17, 19, 151, 17},1, {105},{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
{{10863, 12944, 12977, 15090, 15123, 15123, 15124, 15156, 19384, 19416}, {0, 17, 16, 0, 0, 49, 19, 17, 0, 17, 17, 0, 81, 17, 17, 19, 0, 0, 0, 16, 0, 0, 0, 1, 0, 17, 19, 0, 49, 131, 17, 17},1,{105},{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
};

//{50, 163, 172}

//{{0, 2786, 5026, 2625, 2529}, {51, 65, 0, 35, 1, 49, 2, 18, 32, 16, 2, 34, 36, 0, 0, 32, 0, 4, 17, 0, 68, 0, 67, 16, 3, 48, 17, 50, 68, 49, 2, 49}, 0.85, {0, 255},{85, 5, 21, 21, 68, 21, 80, 4, 1, 80, 80, 84, 20, 85, 85, 21}}


//block texture index,
//0 grass_block_top.png
//1 grass_block_side.png
//2 dirt.png
//3 stone.png
//4 oak_log_top.png
//5 oak_log_side.png
//6 sand.png
//7 gravel.png
//8 glass.png
//9 oak_leave.png
//10 crafting_table_top.png
//11 crafting_table_side.png
//12 crafting_table_front.png
//13 oak_plank.png
//14 water_1.png || red_glass.png (for transparency test)
//15 water_2.png
//16 water_3.png
//17 iron_ore.png
//18 iron_block.png
//19 gold_ore.png
//20 gold_block.png
//21 diamond_ore.png
//22 diamond_block.png
//23 coal_ore.png
//24 coal_block.png
//25 obsidian.png
//26 grass.png 
//27 lava.png
//28 glow_stone.png 
//...
//63 glitch.png
//items texture index
//64 stick.png
//65 

const unsigned char blockFaceTexture[][6]={
    {1,1,0,2,1,1},
    {3,3,3,3,3,3},
    {5,5,4,4,5,5},
    {2,2,2,2,2,2},
    {6,6,6,6,6,6},
    {7,7,7,7,7,7},
    {8,8,8,8,8,8},
    {9,9,9,9,9,9},
    {11,11,10,13,11,12},
    {13,13,13,13,13,13},
    {14,14,14,14,14,14},
    {15,15,15,15,15,15}
};
// block id
// 1 grass
// 2 stone
// 3 log
// 4 dirt
// 5 sand
// 6 gravel
// 7 glass
// 8 oak_leave
// 9 crafting_table
// 10 oak_planks
// 11 red glass
// 12 green glass
// 13 blue glass
// 14 water
// 15 lava
// 16 iron ore
// 17 iron block
unsigned short texture::getPixel(unsigned char u,unsigned char v) const
{
    // return the short value of the color corresponding to the pixel of coordinates (u,v) :)
    return colorPalette[(u&1) ? (pixelData[((u>>1)+4*v)]&0b00001111): (pixelData[((u>>1)+4*v)]>>4)];

}
//{255},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
unsigned char texture::getAlpha(unsigned char u,unsigned char v) const
{
    /*
    00 00 00 00     00 00 00 00
    00 00 00 00     00 00 00 00
    00 00 00 00     00 00 00 00
    00 00 00 00     00 00 00 00
    00 00 00 00     00 00 00 00
    00 00 00 00     00 00 00 00
    00 00 00 00     00 00 00 00
    00 00 00 00     00 00 00 00
    */
   
    //int u =0b111; //=0
    //int u =0b110; //=2
    //int u =0b101; //=4
    //int u =0b100; //=6

    //int u =0b011; //=0
    //int u =0b010; //=2
    //int u =0b001; //=4
    //int u =0b000; //=6
    // what the fuck are these comments ?!

    return alphaPalette[(alphaData[(u>>2)+(v<<1)]>>(6-(u&0b11)*2))&0b11];
}

unsigned char getAlphaFromTexture(unsigned char id,unsigned char u,unsigned char v,unsigned char face,unsigned char animOffset)
{
    return textureTable[blockFaceTexture[id-1][face]+animOffset].getAlpha(u,v);
}

unsigned short getPixelFromTexture(unsigned char id,unsigned char u,unsigned char v,unsigned char face,unsigned char animOffset)
{
    
    // return the short value of the color corresponding to the pixel of coordinates (u,v) of the texture corresponding to the id :)
    if (u==7 || u==0 || v==7 || v==0)
    {

        double outlineS=textureTable[blockFaceTexture[id-1][face]+animOffset].outlineStrenght;
        unsigned short col = textureTable[blockFaceTexture[id-1][face]+animOffset].getPixel(u,v);
        unsigned short r,g,b;
        r=(unsigned short)((col>>11)*outlineS);
        g=(unsigned short)(((col>>5)& 0b111111)*outlineS);
        b=(unsigned short)((col& 0b11111)*outlineS);
        return ((r<<11) | (g<<5) | (b))&0b1111111111111111;
    }
    return textureTable[blockFaceTexture[id-1][face]+animOffset].getPixel(u,v);
}